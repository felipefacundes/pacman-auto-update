#! /bin/bash

# For debugging:
verbose=0
forceUpdate=0

mainFunction () {
	removeOrphanLock

	if ! connectionIsMetered; then
		update "pacman"
	fi
}


batteryIsCharged () {
	local capacity="/sys/class/power_supply/BAT1/capacity"

	[[ ! -f "${capacity}" || "$(cat "${capacity}")" -ge 90 ]]
}


forcedUpdate () {
	[[ "${forceUpdate}" -eq 1 ]]
}


checkDebugVariables () {
	local variables=("verbose" "forceUpdate")

	for variable in "${variables[@]}"; do
		if [[ "${!variable}" -ne 0 ]] && [[ "${!variable}" -ne 1 ]]; then
			echo "Invalid ${variable}=${!variable}" >&2
			echo "It can either be 0 or 1"
			exit 1
		fi
	done
}


checkPermissions () {
	if [[ "$(id -u)" -ne 0 ]]; then
		sudo "${0}"
		exit "${?}"
	fi
}


configureTrap () {
	interrupted=""
	setTrap "nonCriticalTrap"
}


connectionIsMetered () {
	[[ -f "/usr/bin/nmcli" ]] &&
	systemctl status NetworkManager | grep --quiet "running" &&
	nmcli --terse --fields GENERAL.METERED dev show | grep --quiet "yes"
}


criticalTrap () {
	nonCriticalTrap
	printf "\nðŸ•‘ Waiting for critical part to finish\n"
}


ifNotInterrupted () {
	local command="${*}"

	if [[ -z "${interrupted}" ]] && [[ batteryIsCharged || forcedUpdate ]]; then
		${command}
	else
		exit 0
	fi
}


installUpdates () {
	local packageManager="${1}"
	local options="--sync --refresh --sysupgrade --noconfirm ${2}"

	so "installUpdates: ${packageManager} ${options}" "${packageManager} ${options}"
}


nonCriticalTrap () {
	interrupted=1
}


outdatedPackages () {
	local packageManager="${1}"

	so "outdatedPackages: refreshDatabases" ${packageManager} --sync --refresh
	[[ -n "$(${packageManager} --query --upgrades 2> "/dev/null" || true)" ]]
}


prepareEnvironment () {
	set -em
	configureTrap
	checkPermissions
	checkDebugVariables
}


pruneOldPackages () {
	pruneOrphans

	if [[ "$(hash paccache 2> /dev/null)" ]]; then
		so "pruneOldPackages: uninstalled" paccache --remove --uninstalled --keep 0
		so "pruneOldPackages: oldVersions" paccache --remove --keep 2
	fi
}


pruneOrphans () {
	local orphans; orphans="$(pacman --query --deps --unrequired --quiet || true)"

	if [[ -n "${orphans}" ]]; then
		# shellcheck disable=SC2086
		so "pruneOrphans" "pacman --noconfirm --remove --recursive --unneeded ${orphans}"
	fi
}


removeOrphanLock () {
	local lock="/var/lib/pacman/db.lck"

	if [[ -f "${lock}" ]]; then
		local modified; modified="$(stat --format=%Y "${lock}")"
		local booted; booted="$(date --date="$(who --boot | cut --delimiter=" " --fields=13-)" +%s)"

		if [[ $(( "${modified}" - "${booted}" )) -lt 0 ]] ||
		[[ $(( "$(date +%s)" - "${modified}" )) -gt 86400 ]]; then
			rm "${lock}"
		else
			echo "Update postponed: The package database has a lock younger than a day, and older than boot time" >&2
			exit 1
		fi
	fi
}


setTrap () {
	local operation="${*}"
	# shellcheck disable=SC2064
	trap "${operation}" ABRT ERR HUP INT QUIT TERM
}


so () {
	local tag="${1}"
	local commands="${*:2}"

	if [[ "${verbose}" -eq 1 ]]; then
		if ! ${commands}; then
			exit "${?}"
		fi
	elif ! error="$(eval "${commands}" 2>&1 >"/dev/null")" ; then
		if [ "${error}" == "" ] ; then
			error="Command failed: ${commands}"
		fi

		echo "${tag}: ${error}" >&2
		exit 1
	fi
}


update () {
	local packageManager="${*}"

	if forcedUpdate || outdatedPackages "${packageManager}"; then
		ifNotInterrupted installUpdates "${packageManager}" "--downloadonly"
		ifNotInterrupted waitFor installUpdates "${packageManager}"
		ifNotInterrupted waitFor pruneOldPackages
	fi
}


waitFor () {
	local command="${*}"

	setTrap "criticalTrap"
	${command} &

	while wait "${!}"; status="${?}"; [[ "${status}" -ge 128 ]]; do
		sleep 1
	done

	if [[ "${status}" -ne 0 ]]; then
		exit "${status}"
	fi

	setTrap "nonCriticalTrap"
}


prepareEnvironment
mainFunction

# vim: noet:ts=4:sw=4
